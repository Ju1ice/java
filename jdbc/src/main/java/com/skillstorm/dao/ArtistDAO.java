package com.skillstorm.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import com.skillstorm.jdbc.example.Artist;

/**
 * Data Access Object
 * 
 * data access from a file, database, csv..
 * 
 * @author PWalsh
 *
 */
public class ArtistDAO {

	public Connection getConnection() throws SQLException {
		return DriverManager.getConnection("jdbc:mysql://localhost:3306/chinook", "root", "root");
	}

	// CRUD
	public Artist save(Artist artist) throws SQLException {
		Connection conn = getConnection();
		// what columns are returned in ResultSet when I call stmt.getGeneratedKeys
		PreparedStatement stmt = conn.prepareStatement("INSERT INTO ARTIST(NAME) VALUES(?)",
				new String[] { "artistId" });
		stmt.setString(1, artist.getName());
		stmt.executeUpdate();
		// get primary key that was generated by DB
		// reflect in memory what's in the DB
		// always only 1 row
		ResultSet keys = stmt.getGeneratedKeys();
		while (keys.next()) {
			int artistId = keys.getInt(1); // 1 is the column in that row
			artist.setArtistId(artistId);
		}
		conn.close();
		return artist;
	}

	public Artist findByArtistId(int id) throws SQLException {
		Connection conn = getConnection();
		PreparedStatement stmt = conn.prepareStatement("select artistId, name from artist where artistId=?");
		stmt.setInt(1, id);
		ResultSet results = stmt.executeQuery();
		results.next();
		Artist artist = new Artist(results.getInt(1), results.getString(2));
		conn.close();
		return artist;
	}

	public List<Artist> findAll() throws SQLException {
		Connection conn = getConnection();
		ResultSet rs = conn.prepareStatement("select * from artist").executeQuery();
		List<Artist> results = new LinkedList<>();
		while (rs.next()) {
			// Beanification. POJOification
			Artist a = new Artist(rs.getInt("artistId"), rs.getString("name"));
			results.add(a);
		}
		conn.close();
		return results;
	}

	public Set<Artist> searchByName(String search) throws SQLException {
		// builder design pattern: alternative to constructors (too many params)
		Person person = Person.builder().eyes("hazel").weight(123121).build();
		//new Person(1,5,"Dan",68,"Pickles",true, 'a', "123 Mockingbird ln");
		
		Connection conn = getConnection();
		PreparedStatement stmt = 
				conn.prepareStatement("select * from artist where name LIKE ?");
		stmt.setString(1, search + "%"); // googling it
		ResultSet rs = stmt.executeQuery();
		Set<Artist> results = new HashSet<>();
		while (rs.next()) {
			Artist a = new Artist(rs.getInt("artistId"), rs.getString("name"));
			results.add(a);
		}
		conn.close();
		return results;
	}

	public void update(Artist artist) {
		// update Artist set name = ?, descrip = ?, columnC = ? where artistId = ?
		throw new UnsupportedOperationException("Not yet implemented");
	}

	public void delete(int id) throws SQLException {
		String sql = "DELETE FROM ARTIST WHERE ARTISTID = ?";
		Connection conn = getConnection();
		conn.setAutoCommit(false);
		PreparedStatement stmt = conn.prepareStatement(sql);
		stmt.setInt(1, id);
		int rows = stmt.executeUpdate();
		//conn.commit();
		System.out.println(rows + " row(s) deleted.");
		//conn.close();
	}

}







